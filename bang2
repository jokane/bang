#!/usr/bin/env python3

import argparse
import re
import yaml
import sys
import pprint

def scan_matching(in_text, start):
    # Scan through in_text, starting from the given start index (which should be
    # the index of an opening delimiter), until the matching closing delimiter.
    # Return the index of the closing delimiter.
    verbose = False

    stack = list(in_text[start])
    i = start + 1

    while stack:
        if i >= len(in_text):
            raise Exception('Missing closing delimiter.  These remain open: %s' % ' '.join(stack))
        c = in_text[i]
        if verbose: print("Checking character", c, "Stack:", stack)
        if c == ']':
            m = stack.pop()
            if m != '[': raise Exception('Mismatched delimiters. %c %c' % (m, c))
            if verbose: print("[ matched with ]")
        if c == '}':
            m = stack.pop()
            if m != '{': raise Exception('Mismatched delimiters. %c %c' % (m, c))
            if verbose: print("{ matched with }")
        if c in '[{':
            stack.append(c)
        if c in '\\':
            i+= 1
        i+= 1 
    return i

def find_template(in_text, start, sigil):
    # Look for a template in the given text, starting at the given position.
    # Return the starting and ending indices of the template we find, along with
    # the name, arguments, and body.
    verbose = False

    # Is there any text left to search?
    if start >= len(in_text):
        return None

    # Where does the next template in the string start?
    i = start
    while True:
        if in_text[i:i+len(sigil)] == sigil and in_text[i+len(sigil)].isalpha(): break
        i+=1
        if i >= len(in_text): return None

    if verbose: print("Template starts at position %d." % i)
    bang_index = i
    i+=len(sigil) # Move past the sigil.
    name_start = i

    # Where does the name of the first template end?
    while in_text[i].isalnum() or in_text[i] in '+_':
        i+=1
    name_end = i
    name = in_text[name_start:name_end]

    if verbose: print("Name: %s" % name)

    # If there are arguments, grab them.
    if in_text[i] == '[':
        arguments_start = i+1
        arguments_end = scan_matching(in_text, i) - 1
        arguments = in_text[arguments_start:arguments_end]
        i = arguments_end + 1
        if verbose: print("Arguments:", arguments)
    else:
        if verbose: print("No arguments.")
        arguments = None

    # If there is a body, grab it.
    if in_text[i] == '{':
        body_start = i+1
        body_end = scan_matching(in_text, i) - 1
        body = in_text[body_start:body_end]
        i = body_end + 1
        if verbose: print("Body:", body)
    else:
        if verbose: print("No body.")
        body = None
    
    return (bang_index, i, name, arguments, body)

def expand_template(config, name, arguments, body):
    # The name we get might actually be a series of template names, separated by
    # plus signs.  Separate them.
    names = name.split('+')

    verbose = False

    if verbose:
        print()
        print()
        print()
        print()
        print(f'Expanding template {name} with arguments {arguments}')
        print(f'Body:')
        print(body)

    
    # We'll want to build a dictionary of values to insert into the macro text,
    # including the instance body.
    values = dict()
    values['body'] = body

    # The template text, into which the values (arguments and body) will be inserted.
    text = ''

    # Assemble a list of specifications for each of the templates that we're
    # dealing with.
    specs = []
    for name1 in names:
        # Find the specification for this template.
        if verbose: print(f'  Blend includes {name1}.')
        try:
            spec = config['templates'][name1]
        except KeyError:
            raise Exception('Template %s is not defined.' % name1)
        specs.append(spec)

    # Check for a base template that is being inherited from.  If this exists,
    # add it to the front of the spec list.  But we need to insist that
    # anything that inherits, inherits from the same base.  The simpler version
    # ---where anyone can inherit from anywhere and we just use all of them---
    # would be more complicated because we'd likely get multiple copies of the
    # base template text, which is probably not what we want.
    base_name = None
    for spec in specs:
        if 'base' in spec and base_name is None:
             base_name = spec['base']
        elif 'base' in spec and base_name!=spec['base']:
             raise Exception('Conflicting base templates: {base_name} and {spec["base"]}')
      
    if base_name:
        if verbose:
            print(f'  Base template is {base_name}.')
        base_spec = config['templates'][base_name]
        specs.insert(0, base_spec)
    else: 
        if verbose:
            print(f'  No base template.')

    # Assemble the argument values and text given in the specifications for
    # each of the templates.
    for spec in specs:
        # Add in the main text.
        if 'text' in spec:
            text += spec['text']

        # Add in any supplied arguments.
        for arg in spec:
            if arg in ['text', 'base', 'default_arg', 'default_arg_default_value', 'special_args']: continue
            if arg in values:
                values[arg] += spec[arg]
            else:
                values[arg] = spec[arg]
    if verbose:
        print("After applying template arguments, values are:")
        pprint.pprint(values)

    # Add in anything specified in the arguments to this instance, Giving each
    # of the templates we're blending a shot at the argument string.
    for spec in specs:

        # If this an inherited template, then the arguments go to the base, and
        # we don't need to handle them here.
        if 'base' in spec:
            if verbose:
                print(f"   Not scanning args for {spec} because it's inherited.")
            continue

        if verbose:
            print(f"   Scanning args for {spec}")

        # If there are arguments, procoss them.
        if arguments is not None:
            # We'll need to keep track of which argument the next character
            # belongs to.  Anything at the start goes to the default argument,
            # if there is one.
            if 'default_arg' in spec:
                current_arg = spec['default_arg']
                if verbose:
                    print(f'    Current arg starts as {current_arg}')
                if current_arg not in values: values[current_arg] = ""
            else:
                current_arg = None
            
            # Go through the argument string one character at at time.
            for c in arguments:
                # Is this character the marker of the start of a special arg
                # for this template?
                if verbose:
                    print(f'    Checking character {c}')
                if 'special_args' in spec and c in spec['special_args']:
                    # Yes.  Subsequent characters should go to that special arg.
                    current_arg = spec['special_args'][c]
                    if verbose:
                        print(f'    Current arg is now {current_arg}')
                    if current_arg not in values: values[current_arg] = ""
                elif not current_arg:
                    # No.  This character is part of the current argument.
                    # ...but we don't HAVE a current argument yet.
                    raise Exception('Template %s instantiated with arguments (%s) that include a default argument, but the template spec has no default argument.' % (name, arguments))
                else:
                    # No.  This character is part of the current argument.
                    if verbose:
                        print(f'     Adding {c} to {current_arg}')
                    values[current_arg] += c
    
        if verbose:
            print("After applying instance arguments, values are:")
            pprint.pprint(values)

        # If we didn't get a value for the default argument, try to use the default value instead.
        if 'default_arg' in spec and 'default_arg_default_value' in spec and spec['default_arg'] not in values:
            values[spec['default_arg']] = spec['default_arg_default_value']
    

    if verbose:
        print('Text before argument subs:')
        pprint.pprint(text)
        
    # Construct the final string by replacing $arg and ?arg markers in the text
    # with the appropriate values.
    text = re.sub(r'\$\$', '_____DOLLAR_____', text)
    text = re.sub(r'\?\?', '_____QUESTION____', text)

    def sub_arg_required(match):
        val_name = match.group(1)
        if verbose:
            print('Values in sub_arg_required:')
            pprint.pprint(values)
            print(f'Need arg named {val_name}')
        try:
            value = values[val_name]
            if verbose:
                print(f'Got value: {value}')

            return value
        except KeyError:
            raise Exception("Template %s needs a %s, which is missing.\n  With these arguments: %s\n  With this body: %s" % (name, val_name, arguments, body))
    text = re.sub(r'\$([A-Za-z_]+)', sub_arg_required, text)

    if verbose:
        print('Text after required argument subs:')
        pprint.pprint(text)

    def sub_arg_optional(match):
        val_name = match.group(1)
        if verbose:
            print('Values in sub_arg_optional:')
            pprint.pprint(values)
            print(f'Need arg named {val_name}')
        try:
            value = values[val_name]
            return value
        except KeyError:
            return ""
    text = re.sub(r'\?([A-Za-z]+)', sub_arg_optional, text)

    text = re.sub('_____DOLLAR_____', '$', text)
    text = re.sub('_____QUESTION____', '?', text)

    return text


def bang(config, text):
    # Find a template in the given string.  Replace it with its appropriate
    # expansion.  Repeat until no templates are left.

    sigil = config['sigil'] if 'sigil' in config else '!'
    
    while True:
        ft_result = find_template(text, 0, sigil)
        if ft_result is None: break
        (template_start, template_end, name, arguments, body) = ft_result
        expansion = expand_template(config, name, arguments, body)
        text = text[:template_start] + expansion + text[template_end:]

    return text


def check_config(config):
    # Perform some sanity checks on a given configuration.
    if config is None:
        raise Exception("No configuration given.")

    if set(config.keys()) != set(['templates', 'substitutions', 'sigil']):
        raise Exception(f"Top level of config should have 'templates' and 'substitions' and 'sigil'.  Has {list(config.keys())} instead.")

    for template_name in config['templates']:
        template = config['templates'][template_name]
        if template is None:
            raise Exception(f'Template {template_name} is empty.')
        has_text = 'text' in template
        has_base = 'base' in template
        if not has_text and not has_base:
            raise Exception("Template %s has neither text nor base fields." % template_name)
        if has_base and template['base'] not in config['templates']:
            raise Exception('Template %s inherits from %s, but %s is not defined.' % (template_name, template['base'], template['base']))


def do_substitutions(config, text, after):
    for sub in config['substitutions']:
        if ('after' in sub and sub['after']) != after:
            continue

        if 'flags' in sub:
            text = re.sub(sub['from'], sub['to'], text, flags=eval(sub['flags']))
        else:
            text = re.sub(sub['from'], sub['to'], text)
    return text

def main(args):
    # Read the input.
    text = open(args.input_filename, 'r').read()

    # Read the configuration.
    config = yaml.safe_load(open(args.config))
    check_config(config)

    # Perform any before-expansion substitutions requested by the config.
    text = do_substitutions(config, text, False)

    # Expand any templates.
    text = bang(config, text)

    # Perform any after-expansion substitutions requested by the config.
    text = do_substitutions(config, text, True)

    # Save the answer.
    open(args.output_filename, 'w').write(text)

def go():
    # Sort out the command line.
    parser = argparse.ArgumentParser()
    parser.add_argument('--input', '-i', dest='input_filename', help='input filename', required=True)
    parser.add_argument('--output', '-o', dest='output_filename', help='output filename', required=True)
    parser.add_argument('--config', '-c', dest='config', help='configuration filename', required=True)
    parser.add_argument('--debug', '-d', dest='debug', help='show stack traces', action='store_true')
    args = parser.parse_args()

    # We only want stack traces in debug mode.
    if args.debug:
        main(args)
    else:
        try:
            main(args)
        except Exception as e:
            print("bang:", e, file=sys.stderr)
            sys.exit(1) 





if __name__ == '__main__':
    go()


